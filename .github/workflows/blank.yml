# Import necessary libraries
from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.button import Button
from kivy.uix.label import Label
from kivy.uix.textinput import TextInput
from plyer import notification

# Define the main app class
class TaskSchedulerApp(App):
    
    # Function to display notification
    def show_notification(self, title, message):
        notification.notify(
            title=title,
            message=message,
            app_name='Task Scheduler App',
            app_icon=None
        )
    
    # Function to add a task to a specific section
    def add_task(self, section):
        # Get task details from user input
        task_title = self.task_title_input.text
        task_description = self.task_description_input.text
        task_due_date = self.task_due_date_input.text
        
        # Create task label
        task_label = Label(text=f"Title: {task_title}\nDescription: {task_description}\nDue Date: {task_due_date}")
        
        # Display task label in the appropriate section
        if section == "Important and Urgent":
            self.important_urgent_layout.add_widget(task_label)
            self.show_notification("New Task Added", f"New task added: {task_title}")
        elif section == "Important":
            self.important_layout.add_widget(task_label)
            self.show_notification("New Task Added", f"New task added: {task_title}")
        elif section == "Urgent":
            self.urgent_layout.add_widget(task_label)
            self.show_notification("New Task Added", f"New task added: {task_title}")
        elif section == "Time":
            self.time_layout.add_widget(task_label)
            self.show_notification("New Task Added", f"New task added: {task_title}")
        
        # Clear input fields after adding task
        self.task_title_input.text = ''
        self.task_description_input.text = ''
        self.task_due_date_input.text = ''

    # Build the app interface
    def build(self):
        # Main layout
        main_layout = BoxLayout(orientation='vertical')
        
        # Input fields for task details
        self.task_title_input = TextInput(hint_text='Task Title')
        self.task_description_input = TextInput(hint_text='Task Description')
        self.task_due_date_input = TextInput(hint_text='Due Date')
        
        # Buttons to add tasks to different sections
        add_important_urgent_button = Button(text='Add to Important and Urgent', on_press=lambda x: self.add_task("Important and Urgent"))
        add_important_button = Button(text='Add to Important', on_press=lambda x: self.add_task("Important"))
        add_urgent_button = Button(text='Add to Urgent', on_press=lambda x: self.add_task("Urgent"))
        add_time_button = Button(text='Add to Time', on_press=lambda x: self.add_task("Time"))
        
        # Layouts for different sections
        self.important_urgent_layout = BoxLayout(orientation='vertical')
        self.important_layout = BoxLayout(orientation='vertical')
        self.urgent_layout = BoxLayout(orientation='vertical')
        self.time_layout = BoxLayout(orientation='vertical')
        
        # Add widgets to main layout
        main_layout.add_widget(self.task_title_input)
        main_layout.add_widget(self.task_description_input)
        main_layout.add_widget(self.task_due_date_input)
        main_layout.add_widget(add_important_urgent_button)
        main_layout.add_widget(add_important_button)
        main_layout.add_widget(add_urgent_button)
        main_layout.add_widget(add_time_button)
        main_layout.add_widget(Label(text="Important and Urgent Tasks:"))
        main_layout.add_widget(self.important_urgent_layout)
        main_layout.add_widget(Label(text="Important Tasks:"))
        main_layout.add_widget(self.important_layout)
        main_layout.add_widget(Label(text="Urgent Tasks:"))
        main_layout.add_widget(self.urgent_layout)
        main_layout.add_widget(Label(text="Time-Based Tasks:"))
        main_layout.add_widget(self.time_layout)
        
        return main_layout

# Run the app
if __name__ == '__main__':
    TaskSchedulerApp().run()
